var tap = require('tap');
var test = tap.test;
var semver = require('../semver.js');

test('\nintersections', function(t) {
    [['~1.1.1', '1.1.10 || 1.1.5', '1.1.10 || 1.1.5'],
        ['^1.1.1', '1.1.10 || 1.1.5', '1.1.10 || 1.1.5'],
        ['>1.1.1', '1.1.10 || 1.1.5', '1.1.10 || 1.1.5'],
        ['>=1.1.5', '1.1.10 || 1.1.5', '1.1.10 || 1.1.5'],
        ['>=1.1.10', '1.1.10 || 1.1.5', '1.1.10'],
        ['>=1.1.10', '=1.1.10 || =1.1.5', '1.1.10'],
        ['<1.2.0', '1.1.10 || 1.1.5', '1.1.10 || 1.1.5'],
        ['<=1.1.10', '1.1.10 || 1.1.5', '1.1.10 || 1.1.5'],
        ['<=1.1.5', '1.1.10 || 1.1.5', '1.1.5'],
        ['<=1.1.10', '~1.1.0', '>=1.1.0 <=1.1.10'],
        ['<=1.1.10', '^1.1.0', '>=1.1.0 <=1.1.10'],
        ['<=1.1.10 ~1.1.5', '^1.1.0', '>=1.1.5 <=1.1.10'],
        ['1.1.5 - 1.1.10', '^1.1.0', '>=1.1.5 <=1.1.10'],
        ['1.1.5 - 1.1.10', '1.1.6 - 1.1.11', '>=1.1.6 <=1.1.10'],
        ['1.1.5 - 1.3.10', '1.1.6 - 1.2', '>=1.1.6 <1.3.0'],
        ['~1.1.1', '~1.2.2', ''],
    ].forEach(function(v) {
        var range1 = semver.Range(v[0]);
        var range2 = semver.Range(v[1]);
        var expect = semver.Range(v[2]).toString();
        var actual1 = range1.intersections(range2);
        var actual2 = range2.intersections(range1);
        t.equal(actual1 ? actual1.toString() : actual1, expect);
        t.equal(actual2 ? actual2.toString() : actual2, expect);
    });
    t.end();
});
